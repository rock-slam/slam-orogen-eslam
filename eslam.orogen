name 'eslam'
version 0.1

using_library 'eslam'
using_library 'eslam-viz'
using_library 'envire'
using_library 'asguard'

import_types_from 'base'
import_types_from 'terrain_estimator'
import_types_from 'envire'
import_types_from "asguard/BodyState.hpp"
import_types_from "asguard/Configuration.hpp"
import_types_from "eslam/Configuration.hpp"
import_types_from "eslam/ContactState.hpp"
import_types_from "eslam/PoseParticle.hpp"

import_types_from "aggregator"

task_context 'Task' do
    needs_configuration
    ##########################
    # configuration options 
    ##########################

    property('eslam_config', '/eslam/Configuration').
	doc 'Configuration options for the eslam filter.'

    property('odometry_config', '/asguard/odometry/Configuration').
	doc 'Configuration options for the asguard odometry.'

    property('asguard_config', '/asguard/Configuration').
	doc 'Configuration options for the asguard robot.'

    property('calc_gmm', 'bool', false).
	doc 'Optionally calculated the Guassian Mixture Model of the particle Distribution.'

    property('hash_config', '/eslam/SurfaceHashConfig').
	doc 'Option to calculate the hash for a given environment and use it to spawn new random particles'

    ##########################
    # environment parameters
    ##########################

    property('environment_path', 'string').
	doc 'path to environment'

    property('environment_debug_path', 'string').
	doc 'if this property is set, the final environment will be written to the given file path.'

    property('debug_viz', 'bool', false).
	doc 'if set to true, the module will display the current environment for debugging.'

    output_port('envire_data', 'std/vector</envire/BinaryEvent>').
	doc 'a dump of currently most likely map'

    ##########################
    # filter parameters
    ##########################

    property('start_pose', '/base/samples/RigidBodyState').
	doc 'path to environment'

    ##########################
    # i/o ports 
    ##########################

    input_port('distance_frames', '/base/samples/DistanceImage').
	needs_reliable_connection.
	doc 'distance images'

    input_port('terrain_classification_frames', '/base/samples/frame/Frame').
	needs_reliable_connection.
	doc '(optional) image frames with visual terrain classification given in the reference frame of the distance images. Need to be in sync with the distance frames.'

    input_port('terrain_classification_wheel', '/terrain_estimator/TerrainClassification').
	needs_reliable_connection.
	doc '(optional) proprioceptive terrain classification data.'

    input_port('scan_samples', '/base/samples/LaserScan').
	needs_reliable_connection.
	doc 'timestamped laser scans'

    input_port('bodystate_samples', '/eslam/BodyContactState').
	needs_reliable_connection.
	doc 'timestamped samples providing the configuration state of the robot.'

    input_port('orientation_samples', '/base/samples/RigidBodyState').
	needs_reliable_connection.
	doc 'timestamped samples providing the orientation of the robot.'

    input_port('reference_pose', '/base/samples/RigidBodyState').
	needs_reliable_connection.
	doc 'you can provide a reference pose here for debug purposes.'

    property('world_frame', 'std/string', 'world')

    output_port('pose_samples', '/base/samples/RigidBodyState').
	doc 'timestamped samples of the particle filters pose centroid.'

    output_port('pose_distribution', '/eslam/PoseDistribution').
	doc 'timestamped particle distribution of the pose.'

    operation('cloneMap').
	argument( 'file', '/std/string', '' ).
	argument( 'resolution', '/double', 0.05 ).
	doc("Dumps the currently best map on the map output port, or to a file if the file parameter is set.")

    output_port('map', 'std/vector</envire/BinaryEvent>').
	doc 'a dump of currently most likely map'

    ##########################
    # transformer
    ##########################

    transformer do
	max_latency( 0.2 )

	transformation("laser", "body")	
	transformation("lcamera", "body")
	transformation("body", "odometry")

	align_port("orientation_samples", 0.01) 
	align_port("scan_samples", 0.02) 
	align_port("terrain_classification_frames", 0.1)
	align_port("terrain_classification_wheel", 0.0)
	align_port("distance_frames", 0.1)
	align_port("bodystate_samples", 0.01)
    end

    port_driven "orientation_samples"
end

deployment "eslam_test" do
    do_not_install

    task("eslam", "Task")

    add_default_logger
end

deployment "eslam" do
    task("eslam", "Task")
    add_default_logger
end
